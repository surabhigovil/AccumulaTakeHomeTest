{"ast":null,"code":"function isBankHoliday(date) {\n  // static holidays\n  const isDate = (d, month, date) => {\n    return d.getMonth() == month - 1 && d.getDate() == date;\n  };\n  if (isDate(date, 1, 1)) {\n    return \"New Year\";\n  } else if (isDate(date, 7, 4)) {\n    return \"Independence Day\";\n  } else if (isDate(date, 11, 11)) {\n    return \"Veterans Day\";\n  } else if (isDate(date, 12, 25)) {\n    return \"Christmas Day\";\n  }\n\n  // dynamic holidays\n  const isDay = (d, month, day, occurance) => {\n    if (d.getMonth() == month - 1 && d.getDay() == day) {\n      if (occurance > 0) {\n        return occurance == Math.ceil(d.getDate() / 7);\n      } else {\n        // check last occurance\n        let _d = new Date(d);\n        _d.setDate(d.getDate() + 7);\n        return _d.getMonth() > d.getMonth();\n      }\n    }\n    return false;\n  };\n  if (isDay(date, 1, 1, 3)) {\n    return \"MLK Day\";\n  } else if (isDay(date, 2, 1, 3)) {\n    return \"Presidents Day\";\n  } else if (isDay(date, 5, 1, -1)) {\n    return \"Memorial Day\";\n  } else if (isDay(date, 9, 1, 1)) {\n    return \"Labor Day\";\n  } else if (isDay(date, 10, 1, 2)) {\n    return \"Columbus Day\";\n  } else if (isDay(date, 11, 4, 4)) {\n    return \"Thanksgiving Day\";\n  }\n\n  // not a holiday\n  return \"\";\n}\nexport function findDaysToShip(product, date) {\n  let maxDaysToShip = product.maxBusinessDaysToShip;\n  const current = new Date();\n  let days = 0;\n  if (!product.shipOnWeekends) {\n    days = getFinalShipDate(date, maxDaysToShip);\n    console.log(`day: ${days}`);\n    return days;\n  }\n  let approxShipDate = new Date();\n  approxShipDate = new Date(approxShipDate.setDate(current.getDate() + maxDaysToShip - 1));\n\n  // const stringDate = `${current.getDate()}-${current.getMonth()+1}-${current.getFullYear()}`;\n\n  return approxShipDate;\n}\nfunction getFinalShipDate(d1, maxDaysToShip) {\n  let d2 = new Date(d1);\n  d2 = new Date(d2.setDate(d2.getUTCDate()));\n  let dayCount = 0;\n  let holidayCount = 0;\n  while (maxDaysToShip > 0) {\n    var day = d1.getDay();\n    if (isBankHoliday(d1) || day === 6 || day === 0) {\n      ++holidayCount;\n    } else {\n      dayCount++;\n      maxDaysToShip--;\n    }\n    d1.setDate(d1.getUTCDate() + 1);\n  }\n  d2 = new Date(d2.setDate(d2.getUTCDate() + holidayCount + dayCount - 1));\n  return d2;\n}","map":{"version":3,"names":["isBankHoliday","date","isDate","d","month","getMonth","getDate","isDay","day","occurance","getDay","Math","ceil","_d","Date","setDate","findDaysToShip","product","maxDaysToShip","maxBusinessDaysToShip","current","days","shipOnWeekends","getFinalShipDate","console","log","approxShipDate","d1","d2","getUTCDate","dayCount","holidayCount"],"sources":["/Users/surabhi/Documents/AccumulaTest/shipping-tracker/src/utils/util.js"],"sourcesContent":["function isBankHoliday(date) {\n    \n    // static holidays\n    const isDate = (d, month, date) => {\n        return d.getMonth() == (month - 1) && d.getDate() == date;\n    };\n    if (isDate(date, 1, 1)) { return \"New Year\"; }\n    else if (isDate(date, 7, 4)) { return \"Independence Day\"; }\n    else if (isDate(date, 11, 11)) { return \"Veterans Day\"; }\n    else if (isDate(date, 12, 25)) { return \"Christmas Day\"; }\n\n    // dynamic holidays\n    const isDay = (d, month, day, occurance) => {\n        if (d.getMonth() == (month - 1) && d.getDay() == day) {\n            if (occurance > 0) {\n                return occurance == Math.ceil(d.getDate() / 7);\n            } else {\n                // check last occurance\n                let _d = new Date(d);\n                _d.setDate(d.getDate() + 7);\n                return _d.getMonth() > d.getMonth();\n            }\n        }\n        return false;\n    };\n    if (isDay(date, 1, 1, 3)) { return \"MLK Day\"; }\n    else if (isDay(date, 2, 1, 3)) { return \"Presidents Day\"; }\n    else if (isDay(date, 5, 1, -1)) { return \"Memorial Day\"; }\n    else if (isDay(date, 9, 1, 1)) { return \"Labor Day\"; }\n    else if (isDay(date, 10, 1, 2)) { return \"Columbus Day\"; }\n    else if (isDay(date, 11, 4, 4)) { return \"Thanksgiving Day\"; }\n\n    // not a holiday\n    return \"\";\n}\n\nexport function findDaysToShip(product, date) {\n    let maxDaysToShip = product.maxBusinessDaysToShip\n\n    const current = new Date();\n    let days = 0;\n\n    if (!product.shipOnWeekends) {\n        days = getFinalShipDate(date, maxDaysToShip);\n        console.log(`day: ${days}`);\n        return days;\n    }\n    \n    let approxShipDate = new Date();\n    approxShipDate = new Date(approxShipDate.setDate(current.getDate() + maxDaysToShip - 1));\n\n    // const stringDate = `${current.getDate()}-${current.getMonth()+1}-${current.getFullYear()}`;\n                \n        \n    return approxShipDate;\n}\n\nfunction getFinalShipDate(d1, maxDaysToShip) {\n    let d2 = new Date(d1);\n    d2 = new Date(d2.setDate(d2.getUTCDate()));\n    let dayCount = 0;\n    let holidayCount = 0;\n    \n    while ( maxDaysToShip > 0) {\n        var day = d1.getDay();\n        if(isBankHoliday(d1) || (day === 6 || day === 0)) {\n            ++holidayCount\n        } else {\n            dayCount++;\n            maxDaysToShip--;\n        }\n        d1.setDate(d1.getUTCDate() + 1);\n    }\n\n    d2 = new Date(d2.setDate(d2.getUTCDate() + holidayCount + dayCount - 1));\n    return d2;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}